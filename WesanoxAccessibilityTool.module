<?php
namespace ProcessWire;

use ProcessWire\Module;

class WesanoxAccessibilityTool extends WireData implements Module, ConfigurableModule {
    public static function getModuleInfo()
    {
        return array(
            'title' => 'wesanox Accessibility Tool',
            'summary' => 'A little Accessibility Tool for Processwire made by wesanox.',
            'version' => '0.1.2',
            'author' => 'Frittenfritze',
            'href' => 'https://wesanox.de',
            'icon' => 'male',
            'singular' => true,
            'autoload' => true,
            'installs' => ['LanguageSupport', 'LanguageSupportFields', 'LanguageSupportPageNames', 'LanguageTabs'],
            'requires' => array(
                'ProcessWire>=3.0.210',
                'PHP>=8.0.0',
//                'WesanoxMatrixContent>=0.0.1',
            ),
        );
    }

    protected string $lang_name = 'de-ls';

//    protected array $externalModules = [
//        'WesanoxMatrixContent' => 'https://github.com/wesanox/WesanoxMatrixContent/archive/refs/heads/main.zip',
//    ];

    protected array $internal_modules = [
        'LanguageSupport',
        'LanguageSupportFields',
        'LanguageSupportPageNames',
        'LanguageTabs'
    ];

    protected array $frontend_modules = [
        'dark',
        'font',
        'contrast',
        'read',
        'image',
        'language',
        'reset',
    ];

    /**
     * install function for the module
     *
     * @return void
     * @throws WirePermissionException
     */
    public function ___install() : void
    {
        foreach ($this->internal_modules as $moduleName) {
            if (!$this->modules->isInstalled($moduleName)) {
                $this->modules->get($moduleName);
            }
        }

        // Install external modules
        foreach ($this->externalModules as $moduleName => $moduleUrl) {
            if (!$this->modules->isInstalled($moduleName)) {
                $message = $this->downloadAndInstallModule($moduleName, $moduleUrl);
                if ($message !== true) $this->error($message);
            }
        }

        $existing_lang = $this->wire->languages->get($this->lang_name);
        $existing_access = $this->wire->pages->get("name=barrierefreiheit");

        if ($existing_access->id == 0) {
            $access = new Page();
            $access->template = 'template_content_only';
            $access->parent = $this->wire->pages->get(1);
            $access->name = 'barrierefreiheit';
            $access->title = 'Barrierefreiheitshinweise';
            $access->save();
        }


        if($existing_lang && $existing_lang->id) {
            $this->message("Sprache '$this->lang_name' ist bereits vorhanden.");
        } else {
            /**
             * @TODO easy language settings. At the Moment we have Problems with the installation of this part - we got an error at this way
             */
//            $language = new Page();
//            $language->template = 'language';
//            $language->parent = $this->wire->pages->get("template=language");
//            $language->name = $this->lang_name;
//            $language->title = 'Einfache Sprache';
//            $language->save();
//
//            $this->wire->languages->add($language);
//            $this->wire->languages->add($this->lang_name);
        }


    }

    /**
     * @param $moduleName
     * @param $moduleURL
     * @return bool|string
     * @throws WireException
     * @throws WirePermissionException
     */
    private function downloadAndInstallModule($moduleName, $moduleURL) {
        $success = false;
        $targetDir = $this->wire()->config->paths->siteModules . $moduleName . '/';
        $moduleInstaller = $this->wire()->modules->get('ProcessModuleInstall');
        $destinationDir = $moduleInstaller->downloadModule($moduleURL, $targetDir);

        // Refresh modules
        if($destinationDir) {
            $this->modules->refresh();
        }

        // Install module
        if ($this->modules->isInstallable($moduleName)) {
            $this->modules->get($moduleName);
        }

        // Check if module is installed
        if ($this->modules->isInstalled($moduleName)) {
            $success = true;
        }

        return $success ?: "Module $moduleName could not be installed.";
    }

    /**
     * Modul-Konfiguration
     */
    public static function getModuleConfigInputfields(array $data) : InputfieldWrapper
    {
        $inputfields = new InputfieldWrapper();

        /**
         * Represents a variable named $f.
         *
         * The purpose and type of this variable should be defined
         * based on its usage in the application. Ensure that
         * adequate context is provided where this variable is utilized.
         */
        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->name = 'frontend_modules';
        $f->label = __('Module im Frontend entfernen');
        $f->description = __('Wähle die Module aus, die im Frontend entfernt werden sollen.');
        $f->columnWidth = 50;
        $f->addOption('not_dark', '"Nachtmodus" nicht anzeigen');
        $f->addOption('not_font', '"Schriftgröße" nicht anzeigen');
        $f->addOption('not_contrast', '"Kontrastmodes" nicht anzeigen');
        $f->addOption('not_read', '"Lesemaske" nicht anzeigen');
        $f->addOption('not_image', '"Bilder ausblenden" nicht anzeigen');
        $f->addOption('not_language', '"Leichte Sprache" nicht anzeigen');
        $f->value = isset($data['frontend_modules']) ? $data['frontend_modules'] : [];
        $inputfields->add($f);

        $f = wire('modules')->get('InputfieldText');
        $f->name = 'url_accessibility';
        $f->label = __('URL für die Barrierefreiheitshinweise.');
        $f->description = __('Wenn diese nicht gesetzt wird, wird diese auf die Standard-URL der erstellten Seite gesetzt. (/barrierefreiheit/)');
        $f->placeholder = '/barrierefreiheit/';
        if (isset($data['url_accessibility'])) $f->value = $data['url_accessibility'];
        $f->columnWidth = 50;
        $inputfields->add($f);

        $f = wire('modules')->get('InputfieldCheckbox');
        $f->name = 'remove_language_modules';
        $f->label = __('Sprachmodule beim Deinstallieren automatisch entfernen');
        $f->description = __('Achtung: Diese Option entfernt Sprachunterstützung dauerhaft.');
        $f->value = 1;
        $f->columnWidth = 50;
        $f->checked = !empty($data['remove_language_modules']);
        $inputfields->add($f);

        $f = wire('modules')->get('InputfieldCheckbox');
        $f->name = 'easy_language';
        $f->label = __('Sprache "Einfache Sprache" hinzufügen');
        $f->description = __('Fügt eine neue Sprache mit dem Namen "einfache-sprache" hinzu. (Noch nicht funktional)');
        $f->value = 1;
        $f->columnWidth = 50;
        $f->checked = !empty($data['easy_language']);
        $inputfields->add($f);

        return $inputfields;
    }

    /**
     * uninstall function for the modul
     *
     * @return void
     * @throws WireException
     */
    public function ___uninstall() : void
    {
        $remove = $this->data['remove_language_modules'] ?? false;

        $existing_access = $this->wire->pages->get("name=barrierefreiheit");

        if ($existing_access->id != 0) {
            $existing_access->delete();
        }

        if($remove) {
            $modules = [
                'LanguageTabs',
                'LanguageSupportPageNames',
                'FieldtypePageTitleLanguage',
                'FieldtypeTextLanguage',
                'FieldtypeTextareaLanguage',
                'LanguageSupportFields',
                'LanguageSupport',
            ];

            foreach($modules as $mod) {
                if($this->modules->isInstalled($mod)) {
                    $this->modules->uninstall($mod);

                    wire('log')->save('module-uninstall', "Modul {$mod} wurde entfernt durch MyLanguageCleaner.");
                }
            }
        } else {
            wire('log')->save('module-uninstall', "Sprachmodule wurden beibehalten (Konfiguration).");
        }
    }

    /**
     * @return void
     */
    public function ready()
    {
        if ($this->page->template != 'admin') {
            $this->addHookAfter('Page::render', $this, 'renderAccessibilityTool');
        }
    }

    public function renderAccessibilityTool(HookEvent $event) {
        $html = $event->return;

        $link_accessibility = ( $this->data['url_accessibility'] != '' ) ? $this->data['url_accessibility'] : '/barrierefreiheit/';

//        $savedLanguage = wire()->user->language;

//        foreach(wire()->languages as $language) {
//            if(!wire()->page->viewable($language)) continue;
//
//            $title          = ($language->name === 'default') ? 'de' : $language->name;
//            $active         = ($savedLanguage->id == $language->id) ?' active' : '';
//            wire()->user->language = $language;
//
//            $link = wire()->page->url;
//
//            if ($savedLanguage == 'default') {
//                $html_language .= '
//                    <a href="' . $link . '" class="accessibility-option" id="module-language" data-tooltip-title="Leichte Sprache" data-tooltip-text="Hier steht ein kurzer Text zur Funktionsbeschreibung.">
//                        <div class="option-icon"><i class="fas fa-language"></i></div>
//                        <span>Leichte Sprache</span>
//                    </a>';
//            } else if ($savedLanguage == 'einfache-sprache') {
//                $html_language .= '
//                    <a href="' . $link . '" class="accessibility-option active" id="module-language" data-tooltip-title="Leichte Sprache" data-tooltip-text="Hier steht ein kurzer Text zur Funktionsbeschreibung.">
//                        <div class="option-icon"><i class="fas fa-language"></i></div>
//                        <span>Leichte Sprache</span>
//                    </a>';
//            } else {
//                $html_language .= "";
//            }
//
//        }

//        wire()->user->language = $savedLanguage;


        // Deine gewünschte Einbindung
        $insert = '
                    <div id="module-read-mask" class="d-none"></div>
                    <div class="accessibility-widget position-fixed">
                        <!-- Floating Button -->
                        <button class="accessibility-button" aria-label="Open Accessibility Options">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                <path fill="currentColor" d="M12 2a2 2 0 0 1 2 2 2 2 0 0 1-2 2 2 2 0 0 1-2-2c0-1.1.9-2 2-2zm9 7h-6v13h-2v-6h-2v6H9V9H3V7h18v2z" />
                            </svg>
                        </button>
                    
                        <!-- Widget Panel -->
                        <div class="accessibility-panel">
                            <div id="tooltip-container"></div>
                            <div class="py-2 ps-4 pe-2 bg-dark">
                                <div class="row">
                                    <div class="col-10">
                                        <div class="h5 text-white">Barrierefreiheit</div>
                                        <div class="h6 text-white">Einstellungen</div>
                                    </div>
                                    <div class="col-2 d-flex justify-content-end align-items-center">
                                        <div>
                                            <button class="d-flex align-items-center justify-content-center btn-close" aria-label="Close Accessibility Panel">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
                                                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16"/>
                                                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/>
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="bg-white p-4 accessibility-content">
                                <div class="h6 mb-3">
                                    <a class="accessibility-link" href="' . $link_accessibility . '">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-info-lg" viewBox="0 0 16 16">
                                            <path d="m9.708 6.075-3.024.379-.108.502.595.108c.387.093.464.232.38.619l-.975 4.577c-.255 1.183.14 1.74 1.067 1.74.72 0 1.554-.332 1.933-.789l.116-.549c-.263.232-.65.325-.905.325-.363 0-.494-.255-.402-.704zm.091-2.755a1.32 1.32 0 1 1-2.64 0 1.32 1.32 0 0 1 2.64 0"/>
                                        </svg>
                                        Informationen zur Barrierefreiheit
                                     </a>
                                </div>
                                ' . $this->getModulesFrontend() . '
                            </div>
                        </div>
                    </div>';

        // Direkt nach <body> einfügen
        $html = preg_replace('/<body\b([^>]*)>/', "<body$1>\n$insert", $html, 1);

        $event->return = $html;
    }

    /**
     * Adds a new language with the name "leichte-sprache" or "de-ls" to the system.
     * The method checks if the language already exists. If it does not, it creates and saves
     * the new language under the languages root page. Once added, the language becomes available
     * in the system.
     *
     * @return void
     * @throws WireException If the languages root page cannot be found.
     */
    protected function addEasyLanguage() : void {
        if($this->wire->languages->get($this->lang_name)->id) {
            $this->message("Sprache '$this->lang_name' ist bereits vorhanden.");
        } else {
            // Sprachen-Seite finden
            $parent = $this->wire->pages->get("template=language");

            if(!$parent->id) {
                throw new WireException("Konnte die Sprachen-Seite nicht finden.");
            }

            $this->wire->languages->add($this->lang_name);

            $this->message("Sprache 'Einfache Sprache' wurde hinzugefügt.");
        }
    }

    /**
     * @return string
     */
    private function getModulesFrontend() : string
    {
        $html = "";

        foreach ($this->frontend_modules as $module) {
            $array = (isset($this->data['frontend_modules'])) ? in_array('not_' . $module, $this->data['frontend_modules']) : NULL;

            if (!$array) {
                $html .= file_get_contents($this->config->paths->root . "site/modules/WesanoxAccessibilityTool/src/module_$module/module_$module.php");
            }
        }

        return $html;
    }

    /**
     * @return string
     */
    public function renderStyles() : string
    {
        $styles = "<link rel='stylesheet' type='text/css'  href='" . $this->config->paths->siteModules .  "WesanoxAccessibilityTool/src/styles/main.scss'>";

        foreach($this->frontend_modules AS $module)
        {
            $array = false;

            if(isset ($this->data['frontend_modules']))
            {
                $array = in_array('not_' . $module, $this->data['frontend_modules']);
            }

            if ( !$array && $this->getAccessibilityStyles($this->config->paths->siteModules .  'WesanoxAccessibilityTool/src/module_' . $module . '/', 'module_' . $module) != '') {
                $styles .= "<link rel='stylesheet' type='text/css'  href='" . $this->getAccessibilityStyles($this->config->paths->siteModules .  'WesanoxAccessibilityTool/src/module_' . $module . '/', 'module_' . $module) . "'>";
            }
        }

        return $styles;
    }

    /**
     * @return string
     */
    public function renderScripts() : string
    {
        $scripts = "
            <script src='" . $this->config->paths->siteModules .  "WesanoxAccessibilityTool/src/scripts/scripts_main/_functions.js'></script>
            <script src='" . $this->config->paths->siteModules .  "WesanoxAccessibilityTool/src/scripts/main.js'></script>
            ";

        foreach($this->frontend_modules AS $module)
        {
            $array = false;

            if(isset($this->data['frontend_modules']))
            {
                $array = in_array('not_' . $module, $this->data['frontend_modules']);
            }

            if ( !$array && $this->getAccessibilityScripts($this->config->paths->siteModules .  'WesanoxAccessibilityTool/src/module_' . $module . '/', 'module_' . $module) != '' ) {
                $scripts .= "<script src='" . $this->getAccessibilityScripts($this->config->paths->siteModules .  'WesanoxAccessibilityTool/src/module_' . $module . '/', 'module_' . $module) . "'></script>";
            }
        }

        return $scripts;
    }

    /**
     * Add accessibility styles to the configuration.
     *
     * @param string $files_dir The directory path where the style files are located.
     * @param string $type_name The specific type name used to locate the style file.
     *
     * @return string
     */
    private function getAccessibilityStyles(string $files_dir, string $type_name) : string
    {
        $url = '';

        if (file_exists($files_dir . $type_name . '.scss')) {
            $url = $files_dir . $type_name . '.scss';
        }

        return $url;
    }

    /**
     * Add accessibility scripts to the configuration if the specified script file exists.
     *
     * @param string $files_dir Directory path where the script files are located.
     * @param string $type_name Name of the type used to locate the script file.
     *
     * @return string
     */
    private function getAccessibilityScripts(string $files_dir, string $type_name) : string
    {
        $url = '';

        if (file_exists($files_dir . $type_name . '.js')) {
            $url = $files_dir . $type_name . '.js';
        }

        return $url;
    }
}